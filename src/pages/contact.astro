---
import Layout from "../layouts/Layout.astro";
---
<Layout
        title="Contact Us | Ajay Negi "
        description="Get in touch with Ajay Negi for inquiries, collaborations, or feedback. We are here to help you with your needs.">

    <section class="contact-container">
        <div class="contact-information">
            <h1>Let's Chat ðŸ’¬</h1>
            <p>Got something on your mind? Whether it's a question, idea, or just a friendly hello â€” drop us a message
                below. We're all ears (and good vibes)! ðŸ˜Š</p>
        </div>

        <div class="contact-form">
            <form method="POST" id="contact-form">
                <input type="hidden" name="access_key" value="197f6bde-3b19-4470-8a5b-862493338e8c">

                <!-- Name Field -->
                <div class="form-group">
                    <label for="name" class="form-label">Full Name</label>
                    <div class="input-wrapper">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                             fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round"
                             stroke-linejoin="round" class="lucide-icon lucide lucide-user" aria-hidden="true">
                            <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/>
                            <circle cx="12" cy="7" r="4"/>
                        </svg>
                        <input
                                type="text"
                                id="name"
                                name="name"
                                class="form-input"
                                autocomplete="off"
                                placeholder="Your Full Name"
                                aria-label="Enter your full name"
                        />
                    </div>
                    <div class="form-error" id="name-error" role="alert"></div>
                </div>

                <!-- Email Field -->
                <div class="form-group">
                    <label for="email" class="form-label">Email Address</label>
                    <div class="input-wrapper">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                             fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round"
                             stroke-linejoin="round" class="lucide-icon lucide-mail" aria-hidden="true">
                            <rect width="20" height="16" x="2" y="4" rx="2"/>
                            <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/>
                        </svg>
                        <input
                                type="email"
                                id="email"
                                name="email"
                                autocomplete="off"
                                class="form-input"
                                placeholder="Your Email"
                                aria-label="Enter your email address"
                        />
                    </div>
                    <div class="form-error" id="email-error" role="alert"></div>
                </div>

                <!-- Reason Field -->
                <div class="form-group">
                    <label for="reason" class="form-label">Reason</label>
                    <div class="input-wrapper">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                             fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round"
                             stroke-linejoin="round" class="lucide-icon lucide-unplug" aria-hidden="true">
                            <path d="m19 5 3-3"/>
                            <path d="m2 22 3-3"/>
                            <path d="M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"/>
                            <path d="M7.5 13.5 10 11"/>
                            <path d="M10.5 16.5 13 14"/>
                            <path d="m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z"/>
                        </svg>
                        <input
                                type="text"
                                id="reason"
                                name="reason"
                                autocomplete="off"
                                class="form-input"
                                placeholder="Reason for contact"
                                aria-label="State the reason for contacting"
                        />
                    </div>
                    <div class="form-error" id="reason-error" role="alert"></div>
                </div>

                <!-- Message Field -->
                <div class="form-group">
                    <label for="message" class="form-label">Your Message</label>
                    <textarea
                            id="message"
                            name="message"
                            autocomplete="off"
                            class="form-textarea"
                            placeholder="Write your message here"
                            aria-label="Write your message here"
                    ></textarea>
                    <div class="form-error" id="message-error" role="alert"></div>
                </div>


                <!-- Submit Button -->
                <button type="submit" class="form-submit" id="submit-btn">
                    <span class="submit-text">Send Message</span>
                    <span class="submit-loader" id="submit-loader">
                        <svg class="loading-spinner" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                            <path d="M21 12a9 9 0 11-6.219-8.56"/>
                        </svg>
                        Sending...
                    </span>
                </button>


                <!-- Success Message -->
                <div class="form-success" id="form-success" role="alert">
                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                        <polyline points="22,4 12,14.01 9,11.01"></polyline>
                    </svg>
                    Thank you! Your message has been sent successfully.
                </div>

                <!-- Error Message -->
                <div id="form-error" class="form-failure" role="alert" hidden>
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>
                    Oops! Something went wrong. Please try again.
                </div>

            </form>
        </div>
    </section>

    <script>
        document.addEventListener('astro:page-load', initContactForm);

        function initContactForm() {
            const form = document.getElementById('contact-form');
            const submitBtn = document.getElementById('submit-btn');
            const successMessage = document.getElementById('form-success');

            // If elements don't exist on this page, skip initialization
            if (!form || !submitBtn || !successMessage) return;

            // Clear any existing event listeners by cloning and replacing the form
            const newForm = form.cloneNode(true);
            form.parentNode.replaceChild(newForm, form);
            const freshForm = document.getElementById('contact-form');
            const freshSubmitBtn = document.getElementById('submit-btn');
            const freshSuccessMessage = document.getElementById('form-success');
            const errorMessage   = document.getElementById('form-error');


            // Validation rules for each field
            const validationRules = {
                name: {
                    required: true,
                    minLength: 2,
                    pattern: /^[a-zA-Z\s'-]+$/,
                    message: 'Name must be at least 2 characters and contain only letters, spaces, apostrophes, and hyphens'
                },
                email: {
                    required: true,
                    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    message: 'Please enter a valid email address'
                },
                reason: {
                    required: true,
                    minLength: 3,
                    message: 'Reason must be at least 3 characters long'
                },
                message: {
                    required: true,
                    minLength: 20,
                    message: 'Message must be at least 20 characters long'
                }
            };

            // Real-time validation function for input fields (not textarea)
            function validateField(fieldName, showError = true) {
                const field = document.getElementById(fieldName);
                const errorElement = document.getElementById(`${fieldName}-error`);
                const rule = validationRules[fieldName];

                if (!field || !rule) return true;

                const value = field.value.trim();
                let isValid = true;
                let errorMessage = '';

                // Required check
                if (rule.required && !value) {
                    isValid = false;
                    errorMessage = `${getFieldLabel(fieldName)} is required`;
                }
                // Pattern check
                else if (value && rule.pattern && !rule.pattern.test(value)) {
                    isValid = false;
                    errorMessage = rule.message;
                }
                // Length check
                else if (value && rule.minLength && value.length < rule.minLength) {
                    isValid = false;
                    errorMessage = rule.message;
                }

                // Update field appearance
                field.classList.remove('error', 'success');
                if (value) {
                    field.classList.add(isValid ? 'success' : 'error');
                }

                // Show/hide error message
                if (errorElement) {
                    if (showError && !isValid && value) {
                        errorElement.textContent = errorMessage;
                        errorElement.classList.add('visible');
                    } else {
                        errorElement.textContent = '';
                        errorElement.classList.remove('visible');
                    }
                }

                return isValid;
            }

            // Validation function for form submission (checks all fields including empty ones)
            function validateFieldForSubmission(fieldName) {
                const field = document.getElementById(fieldName);
                const errorElement = document.getElementById(`${fieldName}-error`);
                const rule = validationRules[fieldName];

                if (!field || !rule) return true;

                const value = field.value.trim();
                let isValid = true;
                let errorMessage = '';

                // Required check - this will show error for empty fields
                if (rule.required && !value) {
                    isValid = false;
                    errorMessage = `${getFieldLabel(fieldName)} is required`;
                }
                // Pattern check
                else if (value && rule.pattern && !rule.pattern.test(value)) {
                    isValid = false;
                    errorMessage = rule.message;
                }
                // Length check
                else if (value && rule.minLength && value.length < rule.minLength) {
                    isValid = false;
                    errorMessage = rule.message;
                }

                // Update field appearance
                field.classList.remove('error', 'success');
                if (!isValid) {
                    field.classList.add('error');
                } else if (value) {
                    field.classList.add('success');
                }

                // Show/hide error message
                if (errorElement) {
                    if (!isValid) {
                        errorElement.textContent = errorMessage;
                        errorElement.classList.add('visible');
                    } else {
                        errorElement.textContent = '';
                        errorElement.classList.remove('visible');
                    }
                }

                return isValid;
            }

            // Get user-friendly field labels
            function getFieldLabel(fieldName) {
                const labels = {
                    name: 'Full Name',
                    email: 'Email Address',
                    reason: 'Reason',
                    message: 'Message'
                };
                return labels[fieldName] || fieldName;
            }

            // Clear all error messages
            function clearAllErrors() {
                Object.keys(validationRules).forEach(fieldName => {
                    const field = document.getElementById(fieldName);
                    const errorElement = document.getElementById(`${fieldName}-error`);

                    if (field) {
                        field.classList.remove('error', 'success');
                    }
                    if (errorElement) {
                        errorElement.textContent = '';
                        errorElement.classList.remove('visible');
                    }
                });
            }

            // Add real-time validation to input fields (excluding textarea)
            ['name', 'email', 'reason'].forEach(fieldName => {
                const field = document.getElementById(fieldName);
                if (field) {
                    // Validate on input for real-time feedback
                    field.addEventListener('input', () => {
                        // Only show errors after user starts typing
                        if (field.value.length > 0) {
                            validateField(fieldName, true);
                        } else {
                            // Clear validation state when field is empty
                            field.classList.remove('error', 'success');
                            const errorElement = document.getElementById(`${fieldName}-error`);
                            if (errorElement) {
                                errorElement.classList.remove('visible');
                            }
                        }
                    });

                    // Also validate on blur
                    field.addEventListener('blur', () => {
                        if (field.value.length > 0) {
                            validateField(fieldName, true);
                        }
                    });
                }
            });

            // Handle form submission
            freshForm.addEventListener('submit', async (e) => {
                e.preventDefault();

                // Clear any existing error messages first
                clearAllErrors();

                // Validate all fields using submission validation (shows errors for empty fields)
                let isFormValid = true;
                Object.keys(validationRules).forEach(fieldName => {
                    if (!validateFieldForSubmission(fieldName)) {
                        isFormValid = false;
                    }
                });

                // If form is invalid, don't submit
                if (!isFormValid) {
                    return;
                }

                // Set loading state
                freshSubmitBtn.disabled = true;
                freshSubmitBtn.classList.add('loading');

                try {
                    // Prepare form data
                    const formData = new FormData(freshForm);
                    const data = Object.fromEntries(formData.entries());

                    // Submit to your API
                    const response = await fetch("https://0u6n608iw4.execute-api.ap-south-1.amazonaws.com/formmailly/api/contact", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify(data),
                    });

                    if (response.ok) {
                        // Show success message
                        freshSuccessMessage.classList.add('visible');
                        freshForm.reset();
                        clearAllErrors();

                        // Hide success message after 5 seconds
                        setTimeout(() => {
                            freshSuccessMessage.classList.remove('visible');
                        }, 5000);
                    } else {
                        // Show error message
                        errorMessage.classList.add('visible');
                        freshForm.reset();
                        clearAllErrors();

                        // Hide success message after 5 seconds
                        setTimeout(() => {
                            errorMessage.classList.remove('visible');
                        }, 5000);
                        throw new Error('Form submission failed');
                    }

                } catch (error) {
                    errorMessage.classList.add('visible');
                    freshForm.reset();
                    clearAllErrors();

                    // Hide success message after 5 seconds
                    setTimeout(() => {
                        errorMessage.classList.remove('visible');
                    }, 5000);
                } finally {
                    // Remove loading state
                    freshSubmitBtn.disabled = false;
                    freshSubmitBtn.classList.remove('loading');
                }
            });

            // Warm up the API endpoint when user starts interacting
            let apiWarmedUp = false;
            const inputs = freshForm.querySelectorAll('input, textarea');
            inputs.forEach(input => {
                input.addEventListener('focus', () => {
                    if (!apiWarmedUp) {
                        apiWarmedUp = true;
                        fetch("https://0u6n608iw4.execute-api.ap-south-1.amazonaws.com/formmailly/api/contact", {
                            method: "GET",
                            mode: "no-cors",
                        }).catch(() => {
                            // Ignore errors for warm-up request
                        });
                    }
                }, { once: true });
            });
        }
    </script>

<!-- JavaScript -->
<!--<script>-->
<!--    document.addEventListener('astro:page-load', initContactForm);-->

<!--    function initContactForm () {-->
<!--        /* Elements */-->
<!--        const form         = document.getElementById('contact-form');-->
<!--        const submitBtn    = document.getElementById('submit-btn');-->
<!--        const successBox   = document.getElementById('form-success');-->
<!--        const failureBox   = document.getElementById('form-error');-->
<!--        const loaderText   = document.getElementById('submit-loader');-->

<!--        if (!form || !submitBtn) return; // Abort if HTML not present-->

<!--        /* -&#45;&#45; Validation rules &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; */-->
<!--        const rules = {-->
<!--            name:   { min: 2,  pattern: /^[a-zA-Z\s'-]+$/,      msg: 'Name must be at least 2 letters'           },-->
<!--            email:  { pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,    msg: 'Enter a valid email address'               },-->
<!--            reason: { min: 3,                                   msg: 'Reason must be at least 3 characters long' },-->
<!--            message:{ min: 20,                                  msg: 'Message must be at least 20 characters'    }-->
<!--        };-->

<!--        /* -&#45;&#45; Real-time field validation &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; */-->
<!--        ['name','email','reason'].forEach(id => {-->
<!--            const field = document.getElementById(id);-->
<!--            field?.addEventListener('input', () => handleValidate(id, false));-->
<!--            field?.addEventListener('blur',  () => handleValidate(id, true));-->
<!--        });-->

<!--        /* Auto-expand textarea */-->
<!--        const txt = document.getElementById('message');-->
<!--        if (txt) {-->
<!--            txt.addEventListener('input', () => {-->
<!--                try {-->
<!--                    txt.style.height = 'auto';-->
<!--                    txt.style.height = `${txt.scrollHeight}px`;-->
<!--                } catch { /* silently ignore */ }-->
<!--            });-->
<!--        }-->

<!--        /* -&#45;&#45; Submission -&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; */-->
<!--        form.addEventListener('submit', async e => {-->
<!--            e.preventDefault();-->
<!--            clearAlerts();-->

<!--            const valid = Object.keys(rules).every(id => handleValidate(id, true));-->
<!--            if (!valid) return;-->

<!--            toggleLoading(true);-->

<!--            try {-->
<!--                const data = Object.fromEntries(new FormData(form).entries());-->

<!--                const res = await fetch(-->
<!--                    'https://0u6n608iw4.execute-api.ap-south-1.amazonaws.com/formmailly/api/contact',-->
<!--                    { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(data) }-->
<!--                );-->

<!--                if (!res.ok) throw new Error('network');-->

<!--                showBox(successBox);-->
<!--                form.reset();-->
<!--            } catch {-->
<!--                showBox(failureBox);-->
<!--            } finally {-->
<!--                toggleLoading(false);-->
<!--            }-->
<!--        });-->

<!--        /* -&#45;&#45; Helpers &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; */-->
<!--        function handleValidate (id, showErr) {-->
<!--            const el   = document.getElementById(id);-->
<!--            const err  = document.getElementById(`${id}-error`);-->
<!--            if (!el) return true;-->

<!--            const { min = 0, pattern, msg } = rules[id];-->
<!--            const val = el.value.trim();-->
<!--            let ok = true, text = '';-->

<!--            if (!val)               { ok = false; text = `${label(id)} is required`; }-->
<!--            else if (val.length<min){ ok = false; text = msg; }-->
<!--            else if (pattern && !pattern.test(val)) { ok = false; text = msg; }-->

<!--            el.classList.toggle('error', !ok && showErr);-->
<!--            el.classList.toggle('success', ok && val);-->
<!--            if (err) {-->
<!--                err.textContent = showErr ? text : '';-->
<!--                err.classList.toggle('visible', showErr && !ok);-->
<!--            }-->
<!--            return ok;-->
<!--        }-->

<!--        function label (id) {-->
<!--            return ({name:'Full Name', email:'Email Address', reason:'Reason', message:'Message'})[id] || id;-->
<!--        }-->

<!--        function clearAlerts () {-->
<!--            [successBox, failureBox].forEach(b => b?.setAttribute('hidden',''));-->
<!--        }-->

<!--        function showBox (box) {-->
<!--            clearAlerts();-->
<!--            box?.removeAttribute('hidden');-->
<!--            setTimeout(() => box?.setAttribute('hidden',''), 5000);-->
<!--        }-->

<!--        function toggleLoading (on) {-->
<!--            submitBtn.disabled = on;-->
<!--            submitBtn.classList.toggle('loading', on);-->
<!--        }-->

<!--        /* -&#45;&#45; Optional API warm-up &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; */-->
<!--        let warmed = false;-->
<!--        form.addEventListener('focusin', () => {-->
<!--            if (warmed) return;-->
<!--            warmed = true;-->
<!--            fetch('https://0u6n608iw4.execute-api.ap-south-1.amazonaws.com/formmailly/api/contact', { mode:'no-cors' })-->
<!--                .catch(()=>{}); // ignore silently-->
<!--        }, { once:true });-->
<!--    }-->
<!--</script>-->

</Layout>

<style>

    .form-input.error,
    .form-textarea.error {
        border-color: #ef4444;
        background: rgba(239, 68, 68, 0.1);
    }

    .form-input.success,
    .form-textarea.success {
        border-color: #22c55e;
        background: rgba(34, 197, 94, 0.1);
    }

    .form-input::placeholder,
    .form-textarea::placeholder {
        color: rgba(255, 255, 255, 0.4);
    }

    .form-textarea {
        resize: vertical;
        min-height: 120px;
        font-family: inherit;
        line-height: 1.5;
    }

    .form-error {
        margin-top: 0.5rem;
        font-size: 0.875rem;
        color: #ef4444;
        opacity: 0;
        transform: translateY(-4px);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        height: 0;
        overflow: hidden;
    }

    .form-error.visible {
        opacity: 1;
        transform: translateY(0);
        height: auto;
    }

    .form-submit {

        position: relative;
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(255, 255, 255, 0.05));
        border: 1px solid rgba(255, 255, 255, 0.15);
        border-radius: 12px;
        padding: 1rem 2rem;
        color: var(--heading);
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        backdrop-filter: blur(20px);
        margin-top: 1rem;
        overflow: hidden;
        width: 100%;
    }

    .form-submit:hover:not(:disabled) {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0.08));
        border-color: rgba(255, 255, 255, 0.25);
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);

    }

    .form-submit:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .submit-text {
        transition: opacity 0.3s ease;
    }

    .submit-loader {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .form-submit.loading .submit-text {
        opacity: 0;
    }

    .form-submit.loading .submit-loader {
        opacity: 1;
    }

    .loading-spinner {
        animation: spin 1s linear infinite;
    }

    @keyframes spin {
        from {
            transform: rotate(0deg);
        }
        to {
            transform: rotate(360deg);
        }
    }

    .form-success {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        background: rgba(34, 197, 94, 0.1);
        border: 1px solid rgba(34, 197, 94, 0.3);
        border-radius: 12px;
        padding: 1rem;
        color: #22c55e;
        font-weight: 500;
        opacity: 0;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        pointer-events: none;
        margin: 0rem 0;
    }

    .form-failure{
        display:flex;
        align-items:center;
        gap:.75rem;
        background:rgba(239,68,68,.1);
        border:1px solid rgba(239,68,68,.3);
        border-radius:12px;
        padding:1rem;
        color:#ef4444;
        font-weight:500;
        transition:opacity .3s ease;
        opacity: 0;
        margin: 0rem 0;
    }


    .form-success.visible {
        margin: 1rem 0;
        opacity: 1;
        pointer-events: auto;
    }
    .form-failure.visible {
        margin: 1rem 0;
        opacity: 1;
        pointer-events: auto;
    }


    .contact-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 2rem;
    }

    .contact-information h1 {
        color: var(--subheading);
        font-size: 2rem;
        margin-bottom: 0.5rem;
        text-align: center;
    }

    .contact-information p {
        color: var(--text);
        max-width: 600px;
        text-align: center;
    }

    .contact-form {
        padding: 1rem;
        border-radius: 10px;
        width: 100%;
        max-width: 700px;
        transition: transform 0.3s ease;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        margin-bottom: 1.5rem;
        position: relative;
    }

    .form-group label {
        color: var(--text);
        margin-bottom: 0.5rem;
    }

    .input-wrapper {
        position: relative;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
    }

    .lucide-icon {
        width: 1.3rem;
        height: 1.3rem;
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        stroke: var(--subheading);
    }

    input, textarea {
        font-family: 'Inter', sans-serif;
        font-weight: normal;
        letter-spacing: 0.5px;
        color: var(--subheading);
        background-color: transparent;
        width: 100%;
        padding: 0.75rem 0.75rem 0.75rem 2.5rem;
        border-radius: 8px;
        border: 1px solid var(--card-border);
        transition: border-color 0.3s ease;
        font-size: 16px;
    }

    textarea {
        font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        font-weight: normal;
        letter-spacing: 0.5px;
        font-size: 15px;
        padding: 0.75rem;
        height: auto;
        resize: vertical;
        min-height: 8rem;
    }

    input:hover, textarea:hover {
        border: 1px solid var(--link);
        outline: none;
        background-color: #ffffff0d;
        cursor: pointer;
    }

    input:focus, textarea:focus {
        border: 1px solid var(--link);
        outline: none;
        background-color: #ffffff0d;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        background-color: var(--link);
        color: var(--light-text);
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .submit-btn:hover {
        color: var(--subheading);
        background-color: var(--link-hover);
        transition: background-color 0.3s ease;
    }
</style>