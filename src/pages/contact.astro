---
import Layout from "../layouts/Layout.astro";
---
<!--<Layout-->
<!--        title="Contact Us | Ajay Negi "-->
<!--        description="Get in touch with Ajay Negi for inquiries, collaborations, or feedback. We are here to help you with your needs.">-->

<Layout
        title="Contact - Ajay Negi"
        description="Get in touch with Ajay Negi for collaboration, opportunities, or just to say hello.">


    <section class="contact-container">
        <div class="contact-information">
            <h1>Let’s Chat 💬</h1>
            <p>Got something on your mind? Whether it's a question, idea, or just a friendly hello — drop us a message
                below. We’re all ears (and good vibes)! 😊</p>
            <!--<p>Have something on your mind? We’d absolutely love to hear from you! Just drop us a message using the form below — whether it's a question, idea, or just a friendly hello, we’re all ears.</p>-->
        </div>
        <div class="contact-form">

            <!-- Contact Form -->
            <form method="POST" aria-labelledby="contact-form" id="form">
                <input type="hidden" name="access_key" value="197f6bde-3b19-4470-8a5b-862493338e8c">
                <fieldset>

                    <!-- Name -->
                    <div class="form-group">
                        <label for="name" class="form-label">Full Name</label>
                        <div class="input-wrapper">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="lucide-icon lucide lucide-user" aria-hidden="true">
                                <path d="M19 21v-2a4 4 0 0 0-4-4H9a4 4 0 0 0-4 4v2"/>
                                <circle cx="12" cy="7" r="4"/>
                            </svg>
                            <input
                                    type="text"
                                    id="name"
                                    name="name"
                                    class="form-input"
                                    placeholder="Your Full Name"
                                    required
                                    aria-required="true"
                                    aria-label="Enter your full name"
                            />
                        </div>
                        <div class="form-error" id="firstName-error" role="alert"></div>
                    </div>

                    <!-- Email -->
                    <div class="form-group">
                        <label for="email" class="form-label">Email Address</label>
                        <div class="input-wrapper">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="lucide-icon lucide-mail" aria-hidden="true">
                                <rect width="20" height="16" x="2" y="4" rx="2"/>
                                <path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/>
                            </svg>
                            <input
                                    type="email"
                                    id="email"
                                    name="email"
                                    class="form-input"
                                    placeholder="Your Email"
                                    required
                                    aria-required="true"
                                    aria-label="Enter your email address"
                            />
                        </div>
                        <div class="form-error" id="email-error" role="alert"></div>
                    </div>

                    <!-- Reason -->
                    <div class="form-group">
                        <label for="reason" class="form-label" >Reason</label>
                        <div class="input-wrapper">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"
                                 fill="none" stroke="#000000" stroke-width="2" stroke-linecap="round"
                                 stroke-linejoin="round" class="lucide-icon lucide-unplug" aria-hidden="true">
                                <path d="m19 5 3-3"/>
                                <path d="m2 22 3-3"/>
                                <path d="M6.3 20.3a2.4 2.4 0 0 0 3.4 0L12 18l-6-6-2.3 2.3a2.4 2.4 0 0 0 0 3.4Z"/>
                                <path d="M7.5 13.5 10 11"/>
                                <path d="M10.5 16.5 13 14"/>
                                <path d="m12 6 6 6 2.3-2.3a2.4 2.4 0 0 0 0-3.4l-2.6-2.6a2.4 2.4 0 0 0-3.4 0Z"/>
                            </svg>
                            <input
                                    type="text"
                                    id="subject"
                                    name="subject"
                                    class="form-input"
                                    placeholder="Reason for contact"
                                    required
                                    aria-required="true"
                                    aria-label="State the reason for contacting"
                            />
                        </div>
                        <div class="form-error" id="subject-error" role="alert"></div>
                    </div>

                    <!-- Message -->
                    <div class="form-group">
                        <label for="message" class="form-label">Your Message</label>
                        <!--placeholder="Type your message here..."-->
                        <textarea
                                id="message"
                                name="message"
                                placeholder="Write your message here"
                                required
                                aria-required="true"
                                aria-label="Write your message here"
                        ></textarea>
                        <div class="form-error" id="message-error" role="alert"></div>

                    </div>

                    <!-- Submit Button -->
                    <div class="submit-btn-container">
                        <button type="submit" class="submit-btn" id="result">Send Message</button>
                    </div>

                </fieldset>
            </form>
        </div>
    </section>


    <script type="module" is:client="load">
        import {initContactForm} from '/contact-form.js';

        initContactForm();

        // View transition compatibility
        if (document.startViewTransition) {
            document.addEventListener('astro:after-swap', initContactForm);
        }
    </script>

    <!--<script is:inline type="module" >-->
    <!--    class ContactForm {-->
    <!--        constructor() {-->
    <!--            this.form = document.getElementById('contact-form');-->
    <!--            this.submitBtn = document.getElementById('submit-btn');-->
    <!--            this.successMessage = document.getElementById('form-success');-->

    <!--            this.validators = {-->
    <!--                name: {-->
    <!--                    required: true,-->
    <!--                    minLength: 2,-->
    <!--                    pattern: /^[a-zA-Z\s]+$/,-->
    <!--                    message: 'Name must contain only letters and be at least 2 characters long'-->
    <!--                },-->
    <!--                email: {-->
    <!--                    required: true,-->
    <!--                    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,-->
    <!--                    message: 'Please enter a valid email address'-->
    <!--                },-->
    <!--                subject: {-->
    <!--                    required: true,-->
    <!--                    minLength: 5,-->
    <!--                    message: 'Subject must be at least 5 characters long'-->
    <!--                },-->
    <!--                message: {-->
    <!--                    required: true,-->
    <!--                    minLength: 20,-->
    <!--                    message: 'Message must be at least 20 characters long'-->
    <!--                }-->
    <!--            };-->

    <!--            this.init();-->
    <!--        }-->

    <!--        init() {-->
    <!--            this.bindEvents();-->
    <!--        }-->

    <!--        bindEvents() {-->
    <!--            // Form submission-->
    <!--            this.form?.addEventListener('submit', (e) => this.handleSubmit(e));-->

    <!--            // Real-time validation-->
    <!--            Object.keys(this.validators).forEach(fieldName => {-->
    <!--                const field = document.getElementById(fieldName);-->
    <!--                if (field) {-->
    <!--                    field.addEventListener('blur', () => this.validateField(fieldName));-->
    <!--                    field.addEventListener('input', () => this.clearFieldError(fieldName));-->
    <!--                }-->
    <!--            });-->
    <!--        }-->

    <!--        validateField(fieldName) {-->
    <!--            const field = document.getElementById(fieldName);-->
    <!--            const validator = this.validators[fieldName];-->
    <!--            const value = field?.value?.trim() || '';-->

    <!--            let isValid = true;-->
    <!--            let errorMessage = '';-->

    <!--            // Required validation-->
    <!--            if (validator.required && !value) {-->
    <!--                isValid = false;-->
    <!--                errorMessage = `${this.getFieldLabel(fieldName)} is required`;-->
    <!--            }-->
    <!--            // Pattern validation-->
    <!--            else if (value && validator.pattern && !validator.pattern.test(value)) {-->
    <!--                isValid = false;-->
    <!--                errorMessage = validator.message;-->
    <!--            }-->
    <!--            // Length validation-->
    <!--            else if (value && validator.minLength && value.length < validator.minLength) {-->
    <!--                isValid = false;-->
    <!--                errorMessage = validator.message;-->
    <!--            }-->

    <!--            this.showFieldError(fieldName, isValid ? '' : errorMessage);-->
    <!--            this.updateFieldState(fieldName, isValid);-->

    <!--            return isValid;-->
    <!--        }-->

    <!--        validateAllFields() {-->
    <!--            let isFormValid = true;-->

    <!--            Object.keys(this.validators).forEach(fieldName => {-->
    <!--                const fieldValid = this.validateField(fieldName);-->
    <!--                if (!fieldValid) {-->
    <!--                    isFormValid = false;-->
    <!--                }-->
    <!--            });-->

    <!--            return isFormValid;-->
    <!--        }-->

    <!--        showFieldError(fieldName, message) {-->
    <!--            const errorElement = document.getElementById(`${fieldName}-error`);-->
    <!--            if (errorElement) {-->
    <!--                errorElement.textContent = message;-->
    <!--                errorElement.classList.toggle('visible', !!message);-->
    <!--            }-->
    <!--        }-->

    <!--        clearFieldError(fieldName) {-->
    <!--            const field = document.getElementById(fieldName);-->
    <!--            if (field && field.classList.contains('error')) {-->
    <!--                field.classList.remove('error');-->
    <!--                this.showFieldError(fieldName, '');-->
    <!--            }-->
    <!--        }-->

    <!--        updateFieldState(fieldName, isValid) {-->
    <!--            const field = document.getElementById(fieldName);-->
    <!--            if (field) {-->
    <!--                field.classList.remove('error', 'success');-->
    <!--                if (field.value.trim()) {-->
    <!--                    field.classList.add(isValid ? 'success' : 'error');-->
    <!--                }-->
    <!--            }-->
    <!--        }-->

    <!--        getFieldLabel(fieldName) {-->
    <!--            const labelMap = {-->
    <!--                firstName: 'First name',-->
    <!--                lastName: 'Last name',-->
    <!--                email: 'Email address',-->
    <!--                phone: 'Phone number',-->
    <!--                subject: 'Subject',-->
    <!--                message: 'Message'-->
    <!--            };-->
    <!--            return labelMap[fieldName] || fieldName;-->
    <!--        }-->

    <!--        async handleSubmit(e) {-->
    <!--            e.preventDefault();-->

    <!--            if (!this.validateAllFields()) {-->
    <!--                return;-->
    <!--            }-->

    <!--            this.setLoading(true);-->

    <!--            try {-->
    <!--                const formData = new FormData(this.form);-->
    <!--                const data = Object.fromEntries(formData.entries());-->

    <!--                // Simulate API call (replace with actual endpoint)-->
    <!--                await new Promise(resolve => setTimeout(resolve, 2000));-->

    <!--                // Here you would typically send the data to your Java/AWS Lambda backend-->
    <!--                // const response = await fetch('/api/contact', {-->
    <!--                //     method: 'POST',-->
    <!--                //     headers: { 'Content-Type': 'application/json' },-->
    <!--                //     body: JSON.stringify(data)-->
    <!--                // });-->

    <!--                this.showSuccess();-->
    <!--                this.form?.reset();-->
    <!--                this.clearAllFieldStates();-->

    <!--            } catch (error) {-->
    <!--                console.error('Form submission error:', error);-->
    <!--                this.showFieldError('general', 'Something went wrong. Please try again.');-->
    <!--            } finally {-->
    <!--                this.setLoading(false);-->
    <!--            }-->
    <!--        }-->

    <!--        setLoading(isLoading) {-->
    <!--            if (this.submitBtn) {-->
    <!--                this.submitBtn.disabled = isLoading;-->
    <!--                this.submitBtn.classList.toggle('loading', isLoading);-->
    <!--            }-->
    <!--        }-->

    <!--        showSuccess() {-->
    <!--            if (this.successMessage) {-->
    <!--                this.successMessage.classList.add('visible');-->
    <!--                setTimeout(() => {-->
    <!--                    this.successMessage.classList.remove('visible');-->
    <!--                }, 5000);-->
    <!--            }-->
    <!--        }-->

    <!--        clearAllFieldStates() {-->
    <!--            Object.keys(this.validators).forEach(fieldName => {-->
    <!--                const field = document.getElementById(fieldName);-->
    <!--                if (field) {-->
    <!--                    field.classList.remove('error', 'success');-->
    <!--                }-->
    <!--                this.showFieldError(fieldName, '');-->
    <!--            });-->
    <!--        }-->
    <!--    }-->

    <!--    // Initialize when DOM is ready-->
    <!--    document.addEventListener('DOMContentLoaded', () => {-->
    <!--        new ContactForm();-->
    <!--    });-->
    <!--</script>-->



    <!--<script is:inline>-->
    <!--    window.addEventListener("DOMContentLoaded", () => {-->
    <!--        const form = document.getElementById("form");-->
    <!--        const result = document.getElementById("result");-->
    <!--        const inputs = form?.querySelectorAll("input, textarea");-->

    <!--        if (!form || !result || !inputs) return;-->

    <!--        let pinged = false;-->

    <!--        // Lazy cold-start trigger-->
    <!--        inputs.forEach((el) => {-->
    <!--            el.addEventListener("focus", () => {-->
    <!--                if (!pinged) {-->
    <!--                    pinged = true;-->
    <!--                    fetch("https://0u6n608iw4.execute-api.ap-south-1.amazonaws.com/formmailly/api/contact", {-->
    <!--                        method: "GET", // or OPTIONS-->
    <!--                        mode: "no-cors", // suppress CORS errors if not needed-->
    <!--                    }).catch(() => {-->
    <!--                        // ignore errors – it's just a ping-->
    <!--                    });-->
    <!--                }-->
    <!--            }, {once: true});-->
    <!--        });-->

    <!--        form.addEventListener("submit", async (e) => {-->
    <!--            e.preventDefault();-->
    <!--            form.classList.add("was-validated");-->

    <!--            if (!form.checkValidity()) {-->
    <!--                form.querySelector(":invalid")?.focus();-->
    <!--                return;-->
    <!--            }-->

    <!--            const formData = new FormData(form);-->
    <!--            const payload = {-->
    <!--                name: formData.get("name"),-->
    <!--                email: formData.get("email"),-->
    <!--                reason: formData.get("reason"),-->
    <!--                message: formData.get("message"),-->
    <!--            };-->

    <!--            result.innerHTML = "⏳ Sending your message...";-->
    <!--            result.style.background = "#d4d4d8";-->
    <!--            result.style.color = "#111";-->
    <!--            result.style.padding = "8px";-->
    <!--            result.style.borderRadius = "6px";-->
    <!--            result.style.marginTop = "10px";-->

    <!--            try {-->
    <!--                const res = await fetch("https://0u6n608iw4.execute-api.ap-south-1.amazonaws.com/formmailly/api/contact", {-->
    <!--                    method: "POST",-->
    <!--                    headers: {-->
    <!--                        "Content-Type": "application/json",-->
    <!--                    },-->
    <!--                    body: JSON.stringify(payload),-->
    <!--                });-->

    <!--                if (!res.ok) throw new Error(`Server error: ${res.status}`);-->

    <!--                const data = await res.json();-->
    <!--                result.innerHTML = `✅ ${data.message || "Message sent successfully!"}`;-->
    <!--                result.style.background = "#22C55E";-->
    <!--                result.style.color = "#222";-->
    <!--                form.reset();-->
    <!--            } catch (err) {-->
    <!--                console.error("Error submitting form:", err);-->
    <!--                result.innerHTML = "❌ Failed to send message. Please try again.";-->
    <!--                result.style.background = "#ef4444";-->
    <!--                result.style.color = "#fff";-->
    <!--            }-->
    <!--        });-->
    <!--    });-->
    <!--</script>-->

</Layout>


<style>
    .contact-container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 2rem;
    }

    .contact-information h1 {
        color: var(--subheading);
        font-size: 2rem;
        margin-bottom: 0.5rem;
        text-align: center;
    }

    .contact-information p {
        color: var(--text);
        max-width: 600px;
        text-align: center;
    }

    .contact-form {
        padding: 1rem;
        border-radius: 10px;
        width: 100%;
        max-width: 700px;
        transition: transform 0.3s ease;
    }

    .form-group {
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        margin-bottom: 1.5rem;
        position: relative;
    }

    .form-group label {
        color: var(--text);
        margin-bottom: 0.5rem;
    }

    .input-wrapper {
        position: relative;
        display: flex;
        flex-direction: row;
        justify-content: flex-start;
        align-items: center;
    }

    .lucide-icon {
        width: 1.3rem;
        height: 1.3rem;
        position: absolute;
        left: 10px;
        top: 50%;
        transform: translateY(-50%);
        stroke: var(--subheading);
    }

    input, textarea {
        font-family: 'Inter', sans-serif;
        font-weight: normal;
        letter-spacing: 0.5px;
        color: var(--subheading);
        background-color: transparent;
        width: 100%;
        padding: 0.75rem 0.75rem 0.75rem 2.5rem;
        border-radius: 8px;
        border: 1px solid var(--card-border);
        transition: border-color 0.3s ease;
        font-size: 16px;
    }

    textarea {
        font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
        font-weight: normal;
        letter-spacing: 0.5px;
        font-size: 15px;
        padding: 0.75rem;
        height: auto;
        resize: vertical;
        min-height: 8rem;
    }

    input:hover, textarea:hover {
        border: 1px solid var(--link);
        outline: none;
        background-color: #ffffff0d;
        cursor: pointer;
    }

    input:focus, textarea:focus {
        border: 1px solid var(--link);
        outline: none;
        background-color: #ffffff0d;
    }

    .submit-btn {
        display: flex;
        justify-content: center;
        align-items: center;
        width: 100%;
        background-color: var(--link);
        color: var(--light-text);
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .submit-btn:hover {
        color: var(--subheading);
        background-color: var(--link-hover);
        transition: background-color 0.3s ease;
    }
</style>